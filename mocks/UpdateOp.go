// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// UpdateOp is an autogenerated mock type for the UpdateOp type
type UpdateOp struct {
	mock.Mock
}

type UpdateOp_Expecter struct {
	mock *mock.Mock
}

func (_m *UpdateOp) EXPECT() *UpdateOp_Expecter {
	return &UpdateOp_Expecter{mock: &_m.Mock}
}

// Field provides a mock function with given fields:
func (_m *UpdateOp) Field() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Field")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UpdateOp_Field_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Field'
type UpdateOp_Field_Call struct {
	*mock.Call
}

// Field is a helper method to define mock.On call
func (_e *UpdateOp_Expecter) Field() *UpdateOp_Field_Call {
	return &UpdateOp_Field_Call{Call: _e.mock.On("Field")}
}

func (_c *UpdateOp_Field_Call) Run(run func()) *UpdateOp_Field_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UpdateOp_Field_Call) Return(_a0 string) *UpdateOp_Field_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UpdateOp_Field_Call) RunAndReturn(run func() string) *UpdateOp_Field_Call {
	_c.Call.Return(run)
	return _c
}

// isUpdateOp provides a mock function with given fields:
func (_m *UpdateOp) isUpdateOp() {
	_m.Called()
}

// UpdateOp_isUpdateOp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'isUpdateOp'
type UpdateOp_isUpdateOp_Call struct {
	*mock.Call
}

// isUpdateOp is a helper method to define mock.On call
func (_e *UpdateOp_Expecter) isUpdateOp() *UpdateOp_isUpdateOp_Call {
	return &UpdateOp_isUpdateOp_Call{Call: _e.mock.On("isUpdateOp")}
}

func (_c *UpdateOp_isUpdateOp_Call) Run(run func()) *UpdateOp_isUpdateOp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UpdateOp_isUpdateOp_Call) Return() *UpdateOp_isUpdateOp_Call {
	_c.Call.Return()
	return _c
}

func (_c *UpdateOp_isUpdateOp_Call) RunAndReturn(run func()) *UpdateOp_isUpdateOp_Call {
	_c.Call.Return(run)
	return _c
}

// NewUpdateOp creates a new instance of UpdateOp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUpdateOp(t interface {
	mock.TestingT
	Cleanup(func())
}) *UpdateOp {
	mock := &UpdateOp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
