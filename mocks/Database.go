// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	depot "github.com/andyday/depot"
	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

type Database_Expecter struct {
	mock *mock.Mock
}

func (_m *Database) EXPECT() *Database_Expecter {
	return &Database_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, table, entity
func (_m *Database) Create(ctx context.Context, table string, entity interface{}) error {
	ret := _m.Called(ctx, table, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, table, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Database_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - table string
//   - entity interface{}
func (_e *Database_Expecter) Create(ctx interface{}, table interface{}, entity interface{}) *Database_Create_Call {
	return &Database_Create_Call{Call: _e.mock.On("Create", ctx, table, entity)}
}

func (_c *Database_Create_Call) Run(run func(ctx context.Context, table string, entity interface{})) *Database_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *Database_Create_Call) Return(_a0 error) *Database_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Create_Call) RunAndReturn(run func(context.Context, string, interface{}) error) *Database_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, table, entity
func (_m *Database) Delete(ctx context.Context, table string, entity interface{}) error {
	ret := _m.Called(ctx, table, entity)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, table, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Database_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - table string
//   - entity interface{}
func (_e *Database_Expecter) Delete(ctx interface{}, table interface{}, entity interface{}) *Database_Delete_Call {
	return &Database_Delete_Call{Call: _e.mock.On("Delete", ctx, table, entity)}
}

func (_c *Database_Delete_Call) Run(run func(ctx context.Context, table string, entity interface{})) *Database_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *Database_Delete_Call) Return(_a0 error) *Database_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Delete_Call) RunAndReturn(run func(context.Context, string, interface{}) error) *Database_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, table, entity
func (_m *Database) Get(ctx context.Context, table string, entity interface{}) error {
	ret := _m.Called(ctx, table, entity)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, table, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Database_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - table string
//   - entity interface{}
func (_e *Database_Expecter) Get(ctx interface{}, table interface{}, entity interface{}) *Database_Get_Call {
	return &Database_Get_Call{Call: _e.mock.On("Get", ctx, table, entity)}
}

func (_c *Database_Get_Call) Run(run func(ctx context.Context, table string, entity interface{})) *Database_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *Database_Get_Call) Return(_a0 error) *Database_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Get_Call) RunAndReturn(run func(context.Context, string, interface{}) error) *Database_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: ctx, table, entity
func (_m *Database) Put(ctx context.Context, table string, entity interface{}) error {
	ret := _m.Called(ctx, table, entity)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, table, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type Database_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - table string
//   - entity interface{}
func (_e *Database_Expecter) Put(ctx interface{}, table interface{}, entity interface{}) *Database_Put_Call {
	return &Database_Put_Call{Call: _e.mock.On("Put", ctx, table, entity)}
}

func (_c *Database_Put_Call) Run(run func(ctx context.Context, table string, entity interface{})) *Database_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *Database_Put_Call) Return(_a0 error) *Database_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Put_Call) RunAndReturn(run func(context.Context, string, interface{}) error) *Database_Put_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, table, kind, entity, entities, op
func (_m *Database) Query(ctx context.Context, table string, kind string, entity interface{}, entities interface{}, op ...depot.QueryOp) (string, error) {
	_va := make([]interface{}, len(op))
	for _i := range op {
		_va[_i] = op[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, table, kind, entity, entities)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, interface{}, ...depot.QueryOp) (string, error)); ok {
		return rf(ctx, table, kind, entity, entities, op...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, interface{}, ...depot.QueryOp) string); ok {
		r0 = rf(ctx, table, kind, entity, entities, op...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, interface{}, interface{}, ...depot.QueryOp) error); ok {
		r1 = rf(ctx, table, kind, entity, entities, op...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type Database_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - table string
//   - kind string
//   - entity interface{}
//   - entities interface{}
//   - op ...depot.QueryOp
func (_e *Database_Expecter) Query(ctx interface{}, table interface{}, kind interface{}, entity interface{}, entities interface{}, op ...interface{}) *Database_Query_Call {
	return &Database_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, table, kind, entity, entities}, op...)...)}
}

func (_c *Database_Query_Call) Run(run func(ctx context.Context, table string, kind string, entity interface{}, entities interface{}, op ...depot.QueryOp)) *Database_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]depot.QueryOp, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(depot.QueryOp)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}), args[4].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Database_Query_Call) Return(_a0 string, _a1 error) *Database_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_Query_Call) RunAndReturn(run func(context.Context, string, string, interface{}, interface{}, ...depot.QueryOp) (string, error)) *Database_Query_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, table, entity, op
func (_m *Database) Update(ctx context.Context, table string, entity interface{}, op ...depot.UpdateOp) error {
	_va := make([]interface{}, len(op))
	for _i := range op {
		_va[_i] = op[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, table, entity)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, ...depot.UpdateOp) error); ok {
		r0 = rf(ctx, table, entity, op...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Database_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - table string
//   - entity interface{}
//   - op ...depot.UpdateOp
func (_e *Database_Expecter) Update(ctx interface{}, table interface{}, entity interface{}, op ...interface{}) *Database_Update_Call {
	return &Database_Update_Call{Call: _e.mock.On("Update",
		append([]interface{}{ctx, table, entity}, op...)...)}
}

func (_c *Database_Update_Call) Run(run func(ctx context.Context, table string, entity interface{}, op ...depot.UpdateOp)) *Database_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]depot.UpdateOp, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(depot.UpdateOp)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Database_Update_Call) Return(_a0 error) *Database_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Update_Call) RunAndReturn(run func(context.Context, string, interface{}, ...depot.UpdateOp) error) *Database_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
