// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// QueryOp is an autogenerated mock type for the QueryOp type
type QueryOp struct {
	mock.Mock
}

type QueryOp_Expecter struct {
	mock *mock.Mock
}

func (_m *QueryOp) EXPECT() *QueryOp_Expecter {
	return &QueryOp_Expecter{mock: &_m.Mock}
}

// isQueryOp provides a mock function with given fields:
func (_m *QueryOp) isQueryOp() {
	_m.Called()
}

// QueryOp_isQueryOp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'isQueryOp'
type QueryOp_isQueryOp_Call struct {
	*mock.Call
}

// isQueryOp is a helper method to define mock.On call
func (_e *QueryOp_Expecter) isQueryOp() *QueryOp_isQueryOp_Call {
	return &QueryOp_isQueryOp_Call{Call: _e.mock.On("isQueryOp")}
}

func (_c *QueryOp_isQueryOp_Call) Run(run func()) *QueryOp_isQueryOp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *QueryOp_isQueryOp_Call) Return() *QueryOp_isQueryOp_Call {
	_c.Call.Return()
	return _c
}

func (_c *QueryOp_isQueryOp_Call) RunAndReturn(run func()) *QueryOp_isQueryOp_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueryOp creates a new instance of QueryOp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryOp(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryOp {
	mock := &QueryOp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
