// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	depot "github.com/andyday/depot"
	mock "github.com/stretchr/testify/mock"
)

// Table is an autogenerated mock type for the Table type
type Table[T interface{}] struct {
	mock.Mock
}

type Table_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *Table[T]) EXPECT() *Table_Expecter[T] {
	return &Table_Expecter[T]{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, entity
func (_m *Table[T]) Create(ctx context.Context, entity T) (T, error) {
	ret := _m.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, T) (T, error)); ok {
		return rf(ctx, entity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, T) T); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(context.Context, T) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Table_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Table_Create_Call[T interface{}] struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - entity T
func (_e *Table_Expecter[T]) Create(ctx interface{}, entity interface{}) *Table_Create_Call[T] {
	return &Table_Create_Call[T]{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *Table_Create_Call[T]) Run(run func(ctx context.Context, entity T)) *Table_Create_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(T))
	})
	return _c
}

func (_c *Table_Create_Call[T]) Return(_a0 T, _a1 error) *Table_Create_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Table_Create_Call[T]) RunAndReturn(run func(context.Context, T) (T, error)) *Table_Create_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, entity
func (_m *Table[T]) Delete(ctx context.Context, entity T) (T, error) {
	ret := _m.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, T) (T, error)); ok {
		return rf(ctx, entity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, T) T); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(context.Context, T) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Table_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Table_Delete_Call[T interface{}] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - entity T
func (_e *Table_Expecter[T]) Delete(ctx interface{}, entity interface{}) *Table_Delete_Call[T] {
	return &Table_Delete_Call[T]{Call: _e.mock.On("Delete", ctx, entity)}
}

func (_c *Table_Delete_Call[T]) Run(run func(ctx context.Context, entity T)) *Table_Delete_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(T))
	})
	return _c
}

func (_c *Table_Delete_Call[T]) Return(_a0 T, _a1 error) *Table_Delete_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Table_Delete_Call[T]) RunAndReturn(run func(context.Context, T) (T, error)) *Table_Delete_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, entity
func (_m *Table[T]) Get(ctx context.Context, entity T) (T, error) {
	ret := _m.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, T) (T, error)); ok {
		return rf(ctx, entity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, T) T); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(context.Context, T) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Table_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Table_Get_Call[T interface{}] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - entity T
func (_e *Table_Expecter[T]) Get(ctx interface{}, entity interface{}) *Table_Get_Call[T] {
	return &Table_Get_Call[T]{Call: _e.mock.On("Get", ctx, entity)}
}

func (_c *Table_Get_Call[T]) Run(run func(ctx context.Context, entity T)) *Table_Get_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(T))
	})
	return _c
}

func (_c *Table_Get_Call[T]) Return(_a0 T, _a1 error) *Table_Get_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Table_Get_Call[T]) RunAndReturn(run func(context.Context, T) (T, error)) *Table_Get_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: ctx, entity
func (_m *Table[T]) Put(ctx context.Context, entity T) (T, error) {
	ret := _m.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, T) (T, error)); ok {
		return rf(ctx, entity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, T) T); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(context.Context, T) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Table_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type Table_Put_Call[T interface{}] struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - entity T
func (_e *Table_Expecter[T]) Put(ctx interface{}, entity interface{}) *Table_Put_Call[T] {
	return &Table_Put_Call[T]{Call: _e.mock.On("Put", ctx, entity)}
}

func (_c *Table_Put_Call[T]) Run(run func(ctx context.Context, entity T)) *Table_Put_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(T))
	})
	return _c
}

func (_c *Table_Put_Call[T]) Return(_a0 T, _a1 error) *Table_Put_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Table_Put_Call[T]) RunAndReturn(run func(context.Context, T) (T, error)) *Table_Put_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, kind, entity, op
func (_m *Table[T]) Query(ctx context.Context, kind string, entity T, op ...depot.QueryOp) ([]T, string, error) {
	_va := make([]interface{}, len(op))
	for _i := range op {
		_va[_i] = op[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, kind, entity)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 []T
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, T, ...depot.QueryOp) ([]T, string, error)); ok {
		return rf(ctx, kind, entity, op...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, T, ...depot.QueryOp) []T); ok {
		r0 = rf(ctx, kind, entity, op...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, T, ...depot.QueryOp) string); ok {
		r1 = rf(ctx, kind, entity, op...)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, T, ...depot.QueryOp) error); ok {
		r2 = rf(ctx, kind, entity, op...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Table_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type Table_Query_Call[T interface{}] struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - kind string
//   - entity T
//   - op ...depot.QueryOp
func (_e *Table_Expecter[T]) Query(ctx interface{}, kind interface{}, entity interface{}, op ...interface{}) *Table_Query_Call[T] {
	return &Table_Query_Call[T]{Call: _e.mock.On("Query",
		append([]interface{}{ctx, kind, entity}, op...)...)}
}

func (_c *Table_Query_Call[T]) Run(run func(ctx context.Context, kind string, entity T, op ...depot.QueryOp)) *Table_Query_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]depot.QueryOp, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(depot.QueryOp)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(T), variadicArgs...)
	})
	return _c
}

func (_c *Table_Query_Call[T]) Return(_a0 []T, _a1 string, _a2 error) *Table_Query_Call[T] {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Table_Query_Call[T]) RunAndReturn(run func(context.Context, string, T, ...depot.QueryOp) ([]T, string, error)) *Table_Query_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, entity, op
func (_m *Table[T]) Update(ctx context.Context, entity T, op ...depot.UpdateOp) (T, error) {
	_va := make([]interface{}, len(op))
	for _i := range op {
		_va[_i] = op[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, entity)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, T, ...depot.UpdateOp) (T, error)); ok {
		return rf(ctx, entity, op...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, T, ...depot.UpdateOp) T); ok {
		r0 = rf(ctx, entity, op...)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(context.Context, T, ...depot.UpdateOp) error); ok {
		r1 = rf(ctx, entity, op...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Table_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Table_Update_Call[T interface{}] struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - entity T
//   - op ...depot.UpdateOp
func (_e *Table_Expecter[T]) Update(ctx interface{}, entity interface{}, op ...interface{}) *Table_Update_Call[T] {
	return &Table_Update_Call[T]{Call: _e.mock.On("Update",
		append([]interface{}{ctx, entity}, op...)...)}
}

func (_c *Table_Update_Call[T]) Run(run func(ctx context.Context, entity T, op ...depot.UpdateOp)) *Table_Update_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]depot.UpdateOp, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(depot.UpdateOp)
			}
		}
		run(args[0].(context.Context), args[1].(T), variadicArgs...)
	})
	return _c
}

func (_c *Table_Update_Call[T]) Return(_a0 T, _a1 error) *Table_Update_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Table_Update_Call[T]) RunAndReturn(run func(context.Context, T, ...depot.UpdateOp) (T, error)) *Table_Update_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewTable creates a new instance of Table. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTable[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Table[T] {
	mock := &Table[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
