// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// QueryDirective is an autogenerated mock type for the QueryDirective type
type QueryDirective struct {
	mock.Mock
}

type QueryDirective_Expecter struct {
	mock *mock.Mock
}

func (_m *QueryDirective) EXPECT() *QueryDirective_Expecter {
	return &QueryDirective_Expecter{mock: &_m.Mock}
}

// isQueryDirective provides a mock function with given fields:
func (_m *QueryDirective) isQueryDirective() {
	_m.Called()
}

// QueryDirective_isQueryDirective_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'isQueryDirective'
type QueryDirective_isQueryDirective_Call struct {
	*mock.Call
}

// isQueryDirective is a helper method to define mock.On call
func (_e *QueryDirective_Expecter) isQueryDirective() *QueryDirective_isQueryDirective_Call {
	return &QueryDirective_isQueryDirective_Call{Call: _e.mock.On("isQueryDirective")}
}

func (_c *QueryDirective_isQueryDirective_Call) Run(run func()) *QueryDirective_isQueryDirective_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *QueryDirective_isQueryDirective_Call) Return() *QueryDirective_isQueryDirective_Call {
	_c.Call.Return()
	return _c
}

func (_c *QueryDirective_isQueryDirective_Call) RunAndReturn(run func()) *QueryDirective_isQueryDirective_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueryDirective creates a new instance of QueryDirective. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryDirective(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryDirective {
	mock := &QueryDirective{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
